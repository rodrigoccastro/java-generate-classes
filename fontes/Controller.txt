package pulltabs.portal.controller;

import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.HttpServletRequest;

@RestController
public class <model_name>Controller {

	private AppResponse app;

	private List<model_name> list<model_name>;
	private Delete<model_name> delete<model_name>;
	private Save<model_name> save<model_name>;
	private Find<model_name> find<model_name>;
	private <model_name>Repository rep<model_name>;
	private UpdatePortalSystemLog updSystemLog;
	private PortalSystemLogRepository repPortalSystemLog;

	public <model_name>Controller(List<model_name> list<model_name>,Delete<model_name> delete<model_name>,
                                  Save<model_name> save<model_name>,Find<model_name> find<model_name>,
                                  <model_name>Repository rep<model_name>,UpdatePortalSystemLog updSystemLog,
                                  PortalSystemLogRepository repPortalSystemLog) {
		this.app = new AppResponse();
		this.list<model_name> = list<model_name>;
		this.delete<model_name> = delete<model_name>;
		this.save<model_name> = save<model_name>;
		this.find<model_name> = find<model_name>;
		this.rep<model_name> = rep<model_name>;
		this.updSystemLog = updSystemLog;
		this.repPortalSystemLog = repPortalSystemLog;
	}

	@RequestMapping(value = "/<model_name_lower>", method = RequestMethod.GET)
	public Object list<model_name>(HttpServletRequest request, @RequestParam(value="filter", required=false) String filter) {
		try {
			return app.ResponseObject(list<model_name>.execute(rep<model_name>, filter));
		} catch(Exception e) {
			return app.ResponseError(this.getClass().getName(), "list<model_name>", new String[]{filter}, e);
		}
	}

	@RequestMapping(value = "/<model_name_lower>/delete", method = RequestMethod.GET)
	public Object delete<model_name>(HttpServletRequest request, @RequestParam(value="id", required=true) String id) {
		try {
			PortalUserEntity userLogado = (PortalUserEntity) request.getSession().getAttribute("user");
			return app.ResponseBoolean(delete<model_name>.execute(userLogado.getId(), updSystemLog, repPortalSystemLog, rep<model_name>, id));
		} catch(Exception e) {
			return app.ResponseError(this.getClass().getName(), "delete<model_name>", new String[]{id}, e);
		}
	}

	@RequestMapping(value = "/<model_name_lower>/save", method =  RequestMethod.POST)
	public Object save<model_name>(HttpServletRequest request, @Validated @RequestBody <model_name>EntityDTO <model_name_lower>) {
		try {
			PortalUserEntity userLogado = (PortalUserEntity) request.getSession().getAttribute("user");
			Boolean ret = save<model_name>.execute(userLogado.getId(), updSystemLog, repPortalSystemLog, rep<model_name>, <model_name_lower>);
			return app.ResponseBoolean(ret);
		} catch(Exception e) {
			return app.ResponseError(this.getClass().getName(), "save<model_name>", new String[]{<model_name_lower>.toString()}, e);
		}
	}

	@RequestMapping(value = "/<model_name_lower>/find", method = RequestMethod.GET)
	public Object find<model_name>(HttpServletRequest request, @RequestParam(value="id", required=true) String id) {
		try {
			return app.ResponseObject(find<model_name>.execute(rep<model_name>, Integer.parseInt(id)));
		} catch(Exception e) {
			return app.ResponseError(this.getClass().getName(), "find<model_name>", new String[]{id}, e);
		}
	}
}